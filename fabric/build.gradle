architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}


configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${mixin_extras_version}")))
    annotationProcessor 'net.fabricmc:sponge-mixin:0.12.5+mixin.0.8.5'

    modCompileOnly("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
        exclude group: 'net.fabricmc.fabric-api'
    }

    modImplementation("com.terraformersmc:modmenu:7.2.2")

//!! MOONLIGHT LIB (REQUIRED) --------------------------------------------------------------------------------------- \\

//    def path = System.getenv('REPOS20_1') + "\\Moonlight\\fabric\\build\\libs\\moonlight-${moonlight_version}-fabric.jar"
//    modImplementation(files(path)) // Importing compiled mod from Moonlight's Repository

//    modImplementation("net.mehvahdjukaar:moonlight:${moonlight_version}-fabric") // LOCAL
    modImplementation("curse.maven:selene-499980:5975796") // v2.13.37

//!! EVERY COMPAT (REQUIRED)
    modImplementation("curse.maven:every-compat-628539:5967268") // v2.7.1

//!! TOOLS
    modRuntimeOnly("curse.maven:jei-238222:5846809")
    modRuntimeOnly("curse.maven:worldedit-225608:4586218")
    modRuntimeOnly("curse.maven:emi-580555:5872525")
    modRuntimeOnly("curse.maven:jade-324717:5666690")

//!! ================================================= DEPENDENCIES ================================================= \\

    //!! ONLY FOR TESTING
//    modRuntimeOnly("curse.maven:puzzles-lib-495476:5904751") // v8.1.25 | Stoneworks
//    modRuntimeOnly("curse.maven:forge-config-api-port-fabric-547434:5902421") // v8.1.25 | Stoneworks
    modRuntimeOnly("com.terraformersmc.terraform-api:terraform-wood-api-v1:13.0.0-alpha.1") // Blockus

    //!! REQUIRED - Only in FABRIC

//!! =================================================== IMPORTS ==================================================== \\


    //!! ONLY FOR TESTING - These modules are in COMMON
//    modRuntimeOnly("curse.maven:create-fabric-624165:5958511")
//    modRuntimeOnly("curse.maven:building-but-better-989479:5382599")
//    modRuntimeOnly("curse.maven:twigs-496913:4603805")
//    modRuntimeOnly("curse.maven:stoneworks-852663:4611948") // puzzles-lib, forge-config-api-port

    //!! REQUIRED - Only in FABRIC

//!! ================================================= FOR TESTING ================================================== \\

    modRuntimeOnly("curse.maven:blockus-312289:5896309") // terraformersmc
}



processResources {
    inputs.property "version", project.version
    inputs.property "mod_id", rootProject.mod_id

    filesMatching("fabric.mod.json") {
        expand "version": project.version, "mod_id": rootProject.mod_id
    }
}


shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "fabric"
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.mod_id + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        maven {
            url = "https://www.cursemaven.com"
            allowInsecureProtocol = true
        }
        maven {
            name = "TerraformersMC"
            url = "https://maven.terraformersmc.com/releases"
        }
        maven {
            url = "https://maven.shedaniel.me"
        }

        maven {
            name = "ModdingPlayground"
            url  = "https://raw.githubusercontent.com/moddingplayground/maven/main/"
        }
    }
}
repositories {
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases" }

    maven {
        name = 'ModdingPlayground'
        url  = 'https://raw.githubusercontent.com/moddingplayground/maven/main/'
    }
    maven { url = "https://mvn.devos.one/releases" } // Porting Lib Releases
    maven { // Reach Entity Attributes
        url = "https://maven.jamieswhiteshirt.com/libs-release"
        content { includeGroup("com.jamieswhiteshirt") }
    }
}